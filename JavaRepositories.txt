JavaPatternPrograms ---> Java Pattern Programs
JavaLogicalPrograms ---> JavaLogicalPrograms
CoreJavaPrograms ---> Core Java Programs


SpringCoreApplication1 ---> Simple Program to show how to configure spring beans using XML file and constructor dependency injection
SpringCoreApplication2 ---> Simple Program to show how to configure spring beans using Java file and constructor dependency injection:
SpringCoreApplication3 ---> Simple Program to show how to configure spring beans using xml file and Setter injection:
SpringCoreApplication4 ---> Simple Program to show how to configure spring beans using java file and setter injection:
SpringCoreApplication5 ---> Simple Program to show how to configure spring beans using Xml file and constructor dependency injection, Reference type as a dependency:
SpringCoreApplication6 ---> Simple Program to show how to configure spring beans using Java file and constructor dependency injection, Reference type as a dependency:
SpringCoreApplication7 ---> Simple Program to show how to configure spring beans using Xml file and setter dependency injection, Reference type as a dependency:
SpringCoreApplication8 ---> Simple Program to show how to configure spring beans using Java file and setter dependency injection, Reference type as a dependency:
SpringCoreApplication9 ---> Simple Program to show how to configure spring beans using Xml file and constructor dependency injection, Collection type as a dependency:
SpringCoreApplication10 ---> Simple Program to show how to configure spring beans using Java file and constructor dependency injection, Collection type as a dependency:
SpringCoreApplication11 ---> Simple Program to show how to configure spring beans using Xml file and setter dependency injection, Collection type as a dependency:
SpringCoreApplication12 ---> Simple Program to show how to configure spring beans using Java file and setter dependency injection, Collection type as a dependency:
SpringCoreApplication13 ---> A Program to show how to configure scope of the bean using Xml configuration file:
SpringCoreApplication14 ---> A Program to show how to configure scope of the bean using Java configuration file:
SpringCoreApplication15 ---> A Program to demonstrate the different scope combination between super class and sub class beans:
SpringCoreApplication16 ---> A Program to demonstrate the use of @Component annotation:
SpringCoreApplication17 ---> A Program to demonstrate the use of @ComponentScan annotation:
SpringCoreApplication18 ---> A Program to demonstrate the use of @Value annotation:
SpringCoreApplication19 ---> A Program to demonstrate the use of @PropertySource annotation:
SpringCoreApplication20 ---> A Program to demonstrate the use of @PreConstruct and @PostDestroy annotation:
SpringCoreApplication21 ---> A Program to demonstrate the use of @Autowire annotation:
SpringCoreApplication22 ---> A Program to demonstrate the use of @Bean annotation:
SpringCoreApplication23 ---> A Program to demonstrate the use of @Primary annotation:
SpringCoreApplication24 ---> A Program to demonstrate the use of @Qualifier annotation:
SpringCoreApplication25 ---> A Program to demonstrate the use of @Lazy annotation:
SrpingCoreApplication26 ---> A Program to demonstrate the use of @Order annotation:


SpringJDBCApplication1 ---> Simple Program to show how to configure spring jdbc using xml file and how to insert record into db:
SpringJDBCApplication2 ---> Simple Program to show how to configure spring jdbc using java file and how to insert record into db:
SpringJDBCApplication3 ---> A program to demonstrate how to insert multiple records into db by using batchUpdate method:
SpringJDBCApplication4 ---> A program to demonstrate how to get single records from db by using queryForObject method:
SpringJDBCApplication5 ---> A program to demonstrate how to get multiple records from db by using queryForList method:
SpringJDBCApplication6 ---> A program to demonstrate how to update records in db by using update method:


SpringORMApplication1 ---> Simple Program to show how to configure spring orm using xml file and how to get records from db:
SpringORMApplication2 ---> Simple Program to show how to configure spring orm using java file and how to get records from db:
SpringORMApplication3 ---> A Program to demonstrate how to get record from db by using findByExample method:
SpringORMApplication4 ---> A Program to demonstrate how to get record from db by using findByNamedParam method:
SpringORMApplication5 ---> A Program to demonstrate how to get record from db by using findByNamedQuery method:
SpringORMApplication6 ---> A Program to demonstrate how to get record from db by using findByNamedQueryAndNamedParam method:
SpringORMApplication7 ---> A Program to demonstrate how to get record from db by using find method:
SpringORMApplication8 ---> A Program to demonstrate how to insert records into db by using save method:


SpringRestApplication1 ---> A Simple Spring Rest Application and it's configuration by using xml file:
SpringRestApplication2 ---> A Simple Spring Rest Application and it's configuration by using java file:
SpringRestApplication3 ---> A Program to demonstrate the use of @RequestMapping annotation:
SpringRestApplication4 ---> A Program to demonstrate the use of @RequestMapping annotation attributes name, value, path, method:
SpringRestApplication5 ---> A Program to demonstrate the use of @RequestMapping annotation attributes params, headers:
SpringRestApplication6 ---> A Program to demonstrate the use of @RequestMapping annotation attributes consumes, produces:
SpringRestApplication7 ---> A Program to demonstrate the use of @GetMapping, @PostMapping, @PutMapping, @PatchMapping and @DeleteMapping:
SpringRestApplication8 ---> A Program to demonstrate the use of @RequestBody annotation:
SpringRestApplication9 ---> A Program to demonstrate the use of @RequestParam annotation:
SpringRestApplication10 ---> A Program to demonstrate the use of @PathVariable annotation:
SpringRestApplication11 ---> A Program to demonstrate the use of @MatrixVariable annotation:
SpringRestApplication12 ---> A Program to demonstrate the use of @RequestHeader annotation:
SpringRestApplication13 ---> A Program to demonstrate the how to work with MultipartFile interface:


SpringInterceptorApplication1 ---> A Simple Program to show how to configure Interceptor in Spring Application with HandlerInterceptorAdapter class:
SpringInterceptorApplication2 ---> A Simple Program to show how to configure Interceptor in Spring Application with AsyncHandlerInterceptor interface:
SpringInterceptorApplication3 ---> A Simple Program to show how to configure Interceptor in Spring Application with HandlerInterceptor class:
SpringInterceptorApplication4 ---> A Program to demonstrate how to configure the multiple URLs to single interceptor:
SpringInterceptorApplication5 ---> A Program to demonstrate how to configure the multiple interceptors to single URL:
SpringInterceptorApplication6 ---> A Program to demonstrate how to configure the multiple interceptors to single URL with order by using order method:


SpringGlobalExceptionHandlingApplication1 ---> A Program to show how to handle global exceptions using @ControllerAdvice annotation:
SpringGlobalExceptionHandlingApplication2 ---> A Program to show how to handle global exceptions using @RestControllerAdvice annotation:
SpringGlobalExceptionHandlingApplication3 ---> A Program to show how to use value, basePackages attributes of @ControllerAdvice or @RestControllerAdvice annotation:


SpringBootCoreApplication1 ---> A Program to show use of ConfigurableApplicationContext interface:
SpringBootCoreApplication2 ---> A Program to change the default banner:


SpringBootRunnerApplication1 ---> A Program to implement custom runner by using CommandLineRunner interface:
SpringBootRunnerApplication2 ---> A Program to implement custom runner by using ApplicationRunner interface:
SpringBootRunnerApplication3 ---> A Program to implement multiple custom runners by using CommandLineRunner, ApplicationRunner interface:
SpringBootRunnerApplication4 ---> A Program to execute custom runners in desired order by Ordered interface:
SpringBootRunnerApplication5 ---> A Program to execute custom runners in desired order by @Order annotation:
SpringBootRunnerApplication6 ---> A Program to show how to pass arguments to CommandLineRunner interface run(String... arg) method:
SpringBootRunnerApplication7 ---> A Program to show how to pass arguments to ApplicationRunner interface run(ApplicationArguments args) method:


SpringBootDataJPAApplication1 ---> A Program to show how to configure the Spring Data JPA in Spring Boot Application:
SpringBootDataJPAApplication2 ---> A Program to show some simple methods to retrieve records from DB:
SpringBootDataJPAApplication3 ---> A Program to show some simple methods to retrieve records from DB:
SpringBootDataJPAApplication4 ---> A Program to show how to work with findBy methods:
SpringBootDataJPAApplication5 ---> A Program to show how to work with @Query annotation:
SpringBootDataJPAApplication6 ---> A Program to show how to work with @Query annotation:
SpringBootDataJPAApplication7 ---> A Program to show how to work with @Query annotation:
SpringBootDataJPAApplication8 ---> A Program to show how to implement custom query building using EntityManager, Query interfaces:
SpringBootDataJPAApplication9 ---> A Program to show how to implement custom query building using EntityManager, CriteriaBuilder interfaces:
SpringBootDataJPAApplication10 ---> A Program to show how to work with predefined save, saveAll, deleteById, deleteAllById and deleteAll methods:
SpringBootDataJPAApplication11 ---> A Program to show how to save, update and delete records by using EntityManager, Query interface:
SpringBootDataJPAApplication12 ---> A Program to show how to save, update and delete records by using @Query annotation:


SpringBootSecurityApplication1 ---> A Program to show how to configure spring security with WebSecurityConfigurerAdapter class, authenticate in memory username and password by basic authentication:
SpringBootSecurityApplication2 ---> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate in memory username and password by basic authentication:
SpringBootSecurityApplication3 ---> A Program to show how to configure spring security with WebSecurityConfigurerAdapter class, authenticate in database username and password by basic authentication:
SpringBootSecurityApplication4 --> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate in database username and password by basic authentication:
SpringBootSecurityApplication5 ---> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate in datbase api key:


SpringBootEurekaServerApplication1 ---> A Simple Netflix Eureka Server application:
SpringBootEurekaServerApplication2 ---> A Program Netflix Eureka Registry and Discovery:	
SpringBootEurekaClientApplication1 ---> A Simple Netflix Eureka Client application:
SpringBootEurekaClientApplication2 ---> A Simple Netflix Eureka Client application:
SpringBootEurekaServerApplication3 ---> A Program Netflix Eureka R&D server and establishing communication with DiscoveryClient:
SpringBootEurekaClientApplication3 ---> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication4 ---> A Simple Netflix Eureka Client as Consumer application and accessing end point by using DiscoveryClient:
SpringBootEurekaServerApplication4 ---> A Program Netflix Eureka R&D server and establishing communication with LoadBalancerClient:
SpringBootEurekaClientApplication5 ---> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication6 ---> A Simple Netflix Eureka Client as Consumer application and accessing end point by using LoadBalancerClient:
SpringBootEurekaServerApplication5 ---> A Program Netflix Eureka R&D server and load balancing using @FeignClient annotation:
SpringBootEurekaClientApplication7 ---> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication8 ---> A Simple Netflix Eureka Client as Consumer application and load balancing using @FeignClient annotation: