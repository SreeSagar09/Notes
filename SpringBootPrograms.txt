SpringBootCoreApplication1 ---> A Program to show use of ConfigurableApplicationContext interface:
SpringBootCoreApplication2 ---> A Program to change the default banner:


SpringBootRunnerApplication1 ---> A Program to implement custom runner by using CommandLineRunner interface:
SpringBootRunnerApplication2 ---> A Program to implement custom runner by using ApplicationRunner interface:
SpringBootRunnerApplication3 ---> A Program to implement multiple custom runners by using CommandLineRunner, ApplicationRunner interface:
SpringBootRunnerApplication4 ---> A Program to execute custom runners in desired order by Ordered interface:
SpringBootRunnerApplication5 ---> A Program to execute custom runners in desired order by @Order annotation:
SpringBootRunnerApplication6 ---> A Program to show how to pass arguments to CommandLineRunner interface run(String... arg) method:
SpringBootRunnerApplication7 ---> A Program to show how to pass arguments to ApplicationRunner interface run(ApplicationArguments args) method:


SpringBootDataJPAApplication1 ---> A Program to show how to configure the Spring Data JPA in Spring Boot Application:
SpringBootDataJPAApplication2 ---> A Program to show some simple methods to retrieve records from DB:
SpringBootDataJPAApplication3 ---> A Program to show some simple methods to retrieve records from DB:
SpringBootDataJPAApplication4 ---> A Program to show how to work with findBy methods:
SpringBootDataJPAApplication5 ---> A Program to show how to work with @Query annotation:
SpringBootDataJPAApplication6 ---> A Program to show how to work with @Query annotation:
SpringBootDataJPAApplication7 ---> A Program to show how to work with @Query annotation:
SpringBootDataJPAApplication8 ---> A Program to show how to implement custom query building using EntityManager, Query interfaces:
SpringBootDataJPAApplication9 ---> A Program to show how to implement custom query building using EntityManager, CriteriaBuilder interfaces:
SpringBootDataJPAApplication10 ---> A Program to show how to work with predefined save, saveAll, deleteById, deleteAllById and deleteAll methods:
SpringBootDataJPAApplication11 ---> A Program to show how to save, update and delete records by using EntityManager, Query interface:
SpringBootDataJPAApplication12 ---> A Program to show how to save, update and delete records by using @Query annotation:


SpringBootSecurityApplication1 ---> A Program to show how to configure spring security with WebSecurityConfigurerAdapter class, authenticate in memory username and password by basic authentication:
SpringBootSecurityApplication2 ---> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate in memory username and password by basic authentication:
SpringBootSecurityApplication3 ---> A Program to show how to configure spring security with WebSecurityConfigurerAdapter class, authenticate in database username and password by basic authentication:
SpringBootSecurityApplication4 --> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate in database username and password by basic authentication:
SpringBootSecurityApplication5 ---> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate in database api key:
SpringBootSecurityApplication6 --> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate username and password by AuthenticationManager:
SpringBootSecurityApplication7 --> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate username and password by AuthenticationManager and JWT Token:
SpringBootSecurityApplication8 --> A Program to show how to configure spring security with SecurityFilterChain interface, authenticate username and password by AuthenticationManager and JWT Token:
SpringBootSecurityApplication9 --> A Program to show how to configure spring security with SecurityFilterChain interface, role based authentication:
SpringBootSecurityApplication10 --> A Program to show how to configure spring security with SecurityFilterChain interface, method level role based authentication:


SpringBootSchedulerApplication1 --> A Program to show how to configure simple spring boot schedulers and how to use configure fixedDelay, fixedRate and initialDelay:
SpringBootSchedulerApplication2 --> A Program to show how to configure simple spring boot schedulers and how to use configure fixedDelayString, fixedRateString and initialDelayString:


SpringBootActuatorApplication1 --> A Program to show how to work with Spring boot Actuators:
SpringBootActuatorApplication2 --> A Program to show how to create custom Actuators:


SpringBootWebSocketsApplication1 --> A simple program to send notification to all users by using WebSockets:
SpringBootWebSocketsApplication2 --> A simple program to send notification to specific user by using WebSockets:


SpringBootEurekaServerApplication1 ---> A Simple Netflix Eureka Server application:

SpringBootEurekaServerApplication2 ---> A Program Netflix Eureka Registry and Discovery:	
SpringBootEurekaClientApplication1 ---> A Simple Netflix Eureka Client application:
SpringBootEurekaClientApplication2 ---> A Simple Netflix Eureka Client application:

SpringBootEurekaServerApplication3 ---> A Program Netflix Eureka R&D server and establishing communication with DiscoveryClient:
SpringBootEurekaClientApplication3 ---> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication4 ---> A Simple Netflix Eureka Client as Consumer application and accessing end point by using DiscoveryClient:

SpringBootEurekaServerApplication4 ---> A Program Netflix Eureka R&D server and establishing communication with LoadBalancerClient:
SpringBootEurekaClientApplication5 ---> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication6 ---> A Simple Netflix Eureka Client as Consumer application and accessing end point by using LoadBalancerClient:

SpringBootEurekaServerApplication5 ---> A Program Netflix Eureka R&D server and load balancing using @FeignClient annotation:
SpringBootEurekaClientApplication7 ---> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication8 ---> A Simple Netflix Eureka Client as Consumer application and load balancing using @FeignClient annotation:

SpringBootEurekaServerApplication6 --> A Program Netflix Eureka R&D server and api gateway by Spring Cloud Gateway:
SpringBootEurekaClientApplication9 --> A Simple Spring Cloud Gateway application and configuration using properties file:
SpringBootEurekaClientApplication10 --> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication11 --> A Simple Netflix Eureka Client as Producer application:

SpringBootEurekaServerApplication7 --> A Program Netflix Eureka R&D server and api gateway by Spring Cloud Gateway:
SpringBootEurekaClientApplication12 --> A Simple Spring Cloud Gateway application and configuration using java file:
SpringBootEurekaClientApplication13 --> A Simple Netflix Eureka Client as Producer application:
SpringBootEurekaClientApplication14 --> A Simple Netflix Eureka Client as Producer application:

SpringBootEurekaServerApplication8 --> A Program Netflix Eureka R&D server and api gateway by Spring Cloud Gateway with Global Filters:
SpringBootEurekaClientApplication15 --> A Simple Spring Cloud Gateway application with Global Filters:
SpringBootEurekaClientApplication16 --> A Simple Netflix Eureka Client as Producer application: